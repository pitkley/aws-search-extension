name: CI

on:
  push:
    branches:
    - main
    - staging
    - trying
    - 'renovate/*'
  pull_request:
    branches:
    - main

jobs:
  check-license-headers:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Check license headers
      run: |
        ./hack/check-license-headers.sh

  yamllint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: yamllint
      uses: ibiqlik/action-yamllint@v3

  build-and-test:
    runs-on: ubuntu-latest

    outputs:
      awscli-hash: ${{ steps.submodule-hashes.outputs.awscli-hash }}
      awscloudformationuserguide-hash: ${{ steps.submodule-hashes.outputs.awscloudformationuserguide-hash }}
      botocore-hash: ${{ steps.submodule-hashes.outputs.botocore-hash }}

    steps:
    - name: Install node toolchain
      uses: actions/setup-node@v1
      with:
        node-version: '12'
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        python-version: '^3.9'
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.x
    - name: Install jsonnet
      run: go get github.com/google/go-jsonnet/cmd/jsonnet
    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - run: npm ci

    - name: Get submodule commit hashes
      id: submodule-hashes
      run: |
        awscli_hash="$(git rev-parse @:index-sources/aws-cli)"
        awscloudformationuserguide_hash="$(git rev-parse @:index-sources/aws-cloudformation-user-guide)"
        botocore_hash="$(git rev-parse @:index-sources/botocore)"
        echo "::set-output name=awscli-hash::${awscli_hash}"
        echo "::set-output name=awscloudformationuserguide-hash::${awscloudformationuserguide_hash}"
        echo "::set-output name=botocore-hash::${botocore_hash}"

    - name: 'aws-cli: index cache'
      id: cache-awscli
      uses: actions/cache@v2
      with:
        path: |
          index-sources/aws-cli/doc/build/
          extension/index/cli.js
          json-indices/cli.json
        key: indices-awscli-${{ steps.submodule-hashes.outputs.awscli-hash }}-${{ hashFiles('hack/generate-index-cli.py') }}
    - name: 'aws-cloudformation-user-guide: index cache'
      id: cache-awscloudformationuserguide
      uses: actions/cache@v2
      with:
        path: |
          extension/index/cfn.js
          json-indices/cfn.js
        key: indices-awscloudformationuserguide-${{ steps.submodule-hashes.outputs.awscloudformationuserguide-hash }}-${{ hashFiles('hack/generate-index-cfn.py') }}
    - name: 'botocore: index cache'
      id: cache-botocore
      uses: actions/cache@v2
      with:
        path: |
          extension/index/api.js
          json-indices/api.json
        key: indices-botocore-${{ steps.submodule-hashes.outputs.botocore-hash }}-${{ hashFiles('hack/generate-index-api.py') }}

    - name: 'aws-cli: Build aws-cli docs'
      if: steps.cache-awscli.outputs.cache-hit != 'true'
      working-directory: index-sources/aws-cli/
      run: |
        pip install -r requirements.txt
        pip install -r requirements-docs.txt
        pip install -e .
        make -C doc json
    - name: 'aws-cli: Generate index'
      if: steps.cache-awscli.outputs.cache-hit != 'true'
      run: |
        hack/generate-index-cli.py
        hack/generate-index-cli.py --export-as-json
    - name: 'aws-cli: verify generated index'
      if: steps.cache-awscli.outputs.cache-hit != 'true'
      run: |
        node_modules/.bin/ajv validate \
          -s hack/index-schemas/api.schema.json \
          -d json-indices/api.json

    - name: 'aws-cloudformation-user-guide: Generate index'
      if: steps.cache-awscloudformationuserguide.outputs.cache-hit != 'true'
      run: |
        hack/generate-index-cfn.py
        hack/generate-index-cfn.py --export-as-json
    - name: 'aws-cloudformation-user-guide: verify generated index'
      if: steps.cache-awscloudformationuserguide.outputs.cache-hit != 'true'
      run: |
        node_modules/.bin/ajv validate \
          -s hack/index-schemas/cfn.schema.json \
          -d json-indices/cfn.json

    - name: 'botocore: Generate index'
      if: steps.cache-botocore.outputs.cache-hit != 'true'
      run: |
        hack/generate-index-api.py
        hack/generate-index-api.py --export-as-json
    - name: 'botocore: verify generated index'
      if: steps.cache-botocore.outputs.cache-hit != 'true'
      run: |
        node_modules/.bin/ajv validate \
          -s hack/index-schemas/cli.schema.json \
          -d json-indices/cli.json

    - name: 'Firefox: prepare manifest'
      run: make firefox
    - name: 'Firefox: web-ext build'
      uses: kewisch/action-web-ext@v1
      id: web-ext-build-firefox
      with:
        cmd: build
        source: extension
        artifacts: web-ext-artifacts/firefox/

    - name: 'Chrome: prepare manifest'
      run: make chrome
    - name: 'Chrome: web-ext build'
      uses: kewisch/action-web-ext@v1
      id: web-ext-build-chrome
      with:
        cmd: build
        source: extension
        artifacts: web-ext-artifacts/chrome/

    - name: 'Edge: prepare manifest'
      run: make edge
    - name: 'Edge: web-ext build'
      uses: kewisch/action-web-ext@v1
      id: web-ext-build-edge
      with:
        cmd: build
        source: extension
        artifacts: web-ext-artifacts/edge/

    - name: Upload extension-ZIPs as artifact to workflow
      uses: actions/upload-artifact@v2
      with:
        name: aws-search-extension
        path: |
          ${{ steps.web-ext-build-firefox.outputs.target }}
          ${{ steps.web-ext-build-chrome.outputs.target }}
          ${{ steps.web-ext-build-edge.outputs.target }}
    - name: Upload JSON-indices as artifact to workflow
      uses: actions/upload-artifact@v2
      with:
        name: indices
        path: |
          json-indices/*.json

  commit-indices:
    runs-on: ubuntu-latest
    needs:
    - build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout indices branch
      uses: actions/checkout@v2
      with:
        ref: indices
    - name: Retrieve indices
      uses: actions/download-artifact@v2
      with:
        name: indices
    - name: Commit updated index
      run: |
        function git_commit {
          local file="$1"
          local subject="$2"
          local message="$3"
          local echo_commit="$4"
          local echo_nocommit="$5"
          local status=0
          git add "$file"
          git \
            -c "user.name=GitHub" \
            -c "user.email=noreply@github.com" \
              commit \
              --quiet \
              --author="github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>" \
              --message "$subject" \
              --message "$message" \
            2>/dev/null || status=$?

          case "$status" in
          0)
              echo "$echo_commit"
              ;;
          1)
              # Couldn't create a commit because it would have been empty.
              echo "$echo_nocommit"
              ;;
          *)
              echo "An unknown error has occurred, exitting!"
              exit 1
              ;;
          esac
        }

        git_commit \
          "cli.json" \
          "‚å®Ô∏è cli: index updated" \
          "Based on aws/aws-cli#${{ needs.build-and-test.outputs.awscli-hash }}" \
          "‚å®Ô∏è cli: created commit" \
          "‚å®Ô∏è cli: no update needed, not committing" \
          ;

        git_commit \
          "cfn.json" \
          "‚òÅÔ∏è cfn: index updated" \
          "Based on awsdocs/aws-cloudformation-user-guide#${{ needs.build-and-test.outputs.awscloudformationuserguide-hash }}" \
          "‚òÅÔ∏è cfn: created commit" \
          "‚òÅÔ∏è cfn: no update needed, not committing" \
          ;

        git_commit \
          "api.json" \
          "üìÑ api: index updated" \
          "Based on boto/botocore#${{ needs.build-and-test.outputs.botocore-hash }}" \
          "üìÑ api: created commit" \
          "üìÑ api: no update needed, not committing" \
          ;

        git push
